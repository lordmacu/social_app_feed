// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'book.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Book.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Book TABLE
class TableBook extends SqfEntityTableBase {
  TableBook() {
    // declare properties of EntityTable
    tableName = 'book';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('testament_id', DbType.integer),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('abbreviation', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableBook();
  }
}

// Metadata TABLE
class TableMetadata extends SqfEntityTableBase {
  TableMetadata() {
    // declare properties of EntityTable
    tableName = 'metadata';
    primaryKeyName = 'key';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('value', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableMetadata();
  }
}

// Testament TABLE
class TableTestament extends SqfEntityTableBase {
  TableTestament() {
    // declare properties of EntityTable
    tableName = 'testament';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTestament();
  }
}

// Verse TABLE
class TableVerse extends SqfEntityTableBase {
  TableVerse() {
    // declare properties of EntityTable
    tableName = 'verse';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('book_id', DbType.integer),
      SqfEntityFieldBase('chapter', DbType.integer),
      SqfEntityFieldBase('verse', DbType.integer),
      SqfEntityFieldBase('text', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableVerse();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class Mynewdbdb extends SqfEntityModelProvider {
  Mynewdbdb() {
    databaseName = mynewdbdb.databaseName;
    databaseTables = [
      TableBook.getInstance,
      TableMetadata.getInstance,
      TableTestament.getInstance,
      TableVerse.getInstance,
    ];

    bundledDatabasePath = mynewdbdb
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Book
class Book {
  Book({this.id, this.testament_id, this.name, this.abbreviation}) {
    setDefaultValues();
  }
  Book.withFields(this.testament_id, this.name, this.abbreviation) {
    setDefaultValues();
  }
  Book.withId(this.id, this.testament_id, this.name, this.abbreviation) {
    setDefaultValues();
  }
  Book.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    testament_id = o['testament_id'] as int;

    name = o['name'] as String;

    abbreviation = o['abbreviation'] as String;
  }
  // FIELDS
  int id;
  int testament_id;
  String name;
  String abbreviation;
  // end FIELDS

  static const bool _softDeleteActivated = false;
  BookManager __mnBook;

  BookManager get _mnBook {
    return __mnBook = __mnBook ?? BookManager();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (testament_id != null) {
      map['testament_id'] = testament_id;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (abbreviation != null) {
      map['abbreviation'] = abbreviation;
    }

    return map;
  }

  // methods
  Future<Map<String, dynamic>> toMapWithChilds([bool forQuery = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (testament_id != null) {
      map['testament_id'] = testament_id;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (abbreviation != null) {
      map['abbreviation'] = abbreviation;
    }

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap());
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds());
  }

  List<dynamic> toArgs() {
    return [id, testament_id, name, abbreviation];
  }

  static Future<List<Book>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Book.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Book>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<Book>();
    try {
      objList = list
          .map((book) => Book.fromMap(book as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Book.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Book>> fromObjectList(Future<List<dynamic>> o) async {
    final booksList = List<Book>();
    final data = await o;
    for (int i = 0; i < data.length; i++) {
      booksList.add(Book.fromMap(data[i] as Map<String, dynamic>));
    }
    return booksList;
  }

  static List<Book> fromMapList(List<Map<String, dynamic>> query) {
    final List<Book> books = List<Book>();
    for (Map map in query) {
      books.add(Book.fromMap(map as Map<String, dynamic>));
    }
    return books;
  }

  /// returns Book by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns Book if exist, otherwise returns null
  Future<Book> getById(int id) async {
    Book bookObj;
    final data = await _mnBook.getById(id);
    if (data.length != 0) {
      bookObj = Book.fromMap(data[0] as Map<String, dynamic>);
    } else {
      bookObj = null;
    }
    return bookObj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnBook.insert(this);
    } else {
      id = await _upsert();
    }
    return id;
  }

  /// saveAs Book. Returns a new Primary Key value of Book

  /// <returns>Returns a new Primary Key value of Book
  Future<int> saveAs() async {
    id = null;
    return save();
  }

  /// saveAll method saves the sent List<Book> as a batch in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Book> books) async {
    final results = _mnBook.saveAll(
        'INSERT OR REPLACE INTO book (id,  testament_id, name, abbreviation)  VALUES (?,?,?,?)',
        books);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    return id = await _mnBook.rawInsert(
        'INSERT OR REPLACE INTO book (id,  testament_id, name, abbreviation)  VALUES (?,?,?,?)',
        [id, testament_id, name, abbreviation]);
  }

  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Book> books) async {
    final results = await _mnBook.rawInsertAll(
        'INSERT OR REPLACE INTO book (id,  testament_id, name, abbreviation)  VALUES (?,?,?,?)',
        books);
    return results;
  }

  /// Deletes Book

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Book invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnBook
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnBook.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  //private BookFilterBuilder _Select;
  BookFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    return BookFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  BookFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return BookFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void setDefaultValues() {}
  //end methods
}
// endregion book

// region BookField
class BookField extends SearchCriteria {
  BookField(this.bookFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  BookFilterBuilder bookFB;

  BookField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  BookFilterBuilder equals(var pValue) {
    param.expression = '=';
    bookFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookFB.parameters, param, SqlSyntax.EQuals,
            bookFB._addedBlocks)
        : setCriteria(pValue, bookFB.parameters, param, SqlSyntax.NotEQuals,
            bookFB._addedBlocks);
    _waitingNot = '';
    bookFB._addedBlocks.needEndBlock[bookFB._blockIndex] =
        bookFB._addedBlocks.retVal;
    return bookFB;
  }

  BookFilterBuilder isNull() {
    bookFB._addedBlocks = setCriteria(
        0,
        bookFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        bookFB._addedBlocks);
    _waitingNot = '';
    bookFB._addedBlocks.needEndBlock[bookFB._blockIndex] =
        bookFB._addedBlocks.retVal;
    return bookFB;
  }

  BookFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      bookFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          bookFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bookFB._addedBlocks);
      _waitingNot = '';
      bookFB._addedBlocks.needEndBlock[bookFB._blockIndex] =
          bookFB._addedBlocks.retVal;
    }
    return bookFB;
  }

  BookFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      bookFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          bookFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bookFB._addedBlocks);
      _waitingNot = '';
      bookFB._addedBlocks.needEndBlock[bookFB._blockIndex] =
          bookFB._addedBlocks.retVal;
      bookFB._addedBlocks.needEndBlock[bookFB._blockIndex] =
          bookFB._addedBlocks.retVal;
    }
    return bookFB;
  }

  BookFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      bookFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          bookFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bookFB._addedBlocks);
      _waitingNot = '';
      bookFB._addedBlocks.needEndBlock[bookFB._blockIndex] =
          bookFB._addedBlocks.retVal;
    }
    return bookFB;
  }

  BookFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      bookFB._addedBlocks = setCriteria(
          pFirst,
          bookFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bookFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        bookFB._addedBlocks = setCriteria(pFirst, bookFB.parameters, param,
            SqlSyntax.LessThan, bookFB._addedBlocks);
      } else {
        bookFB._addedBlocks = setCriteria(pFirst, bookFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, bookFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        bookFB._addedBlocks = setCriteria(pLast, bookFB.parameters, param,
            SqlSyntax.GreaterThan, bookFB._addedBlocks);
      } else {
        bookFB._addedBlocks = setCriteria(pLast, bookFB.parameters, param,
            SqlSyntax.LessThanOrEquals, bookFB._addedBlocks);
      }
    }
    _waitingNot = '';
    bookFB._addedBlocks.needEndBlock[bookFB._blockIndex] =
        bookFB._addedBlocks.retVal;
    return bookFB;
  }

  BookFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    bookFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookFB.parameters, param, SqlSyntax.GreaterThan,
            bookFB._addedBlocks)
        : setCriteria(pValue, bookFB.parameters, param,
            SqlSyntax.LessThanOrEquals, bookFB._addedBlocks);
    _waitingNot = '';
    bookFB._addedBlocks.needEndBlock[bookFB._blockIndex] =
        bookFB._addedBlocks.retVal;
    return bookFB;
  }

  BookFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    bookFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookFB.parameters, param, SqlSyntax.LessThan,
            bookFB._addedBlocks)
        : setCriteria(pValue, bookFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, bookFB._addedBlocks);
    _waitingNot = '';
    bookFB._addedBlocks.needEndBlock[bookFB._blockIndex] =
        bookFB._addedBlocks.retVal;
    return bookFB;
  }

  BookFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    bookFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, bookFB._addedBlocks)
        : setCriteria(pValue, bookFB.parameters, param, SqlSyntax.LessThan,
            bookFB._addedBlocks);
    _waitingNot = '';
    bookFB._addedBlocks.needEndBlock[bookFB._blockIndex] =
        bookFB._addedBlocks.retVal;
    return bookFB;
  }

  BookFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    bookFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookFB.parameters, param,
            SqlSyntax.LessThanOrEquals, bookFB._addedBlocks)
        : setCriteria(pValue, bookFB.parameters, param, SqlSyntax.GreaterThan,
            bookFB._addedBlocks);
    _waitingNot = '';
    bookFB._addedBlocks.needEndBlock[bookFB._blockIndex] =
        bookFB._addedBlocks.retVal;
    return bookFB;
  }

  BookFilterBuilder inValues(var pValue) {
    bookFB._addedBlocks = setCriteria(
        pValue,
        bookFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        bookFB._addedBlocks);
    _waitingNot = '';
    bookFB._addedBlocks.needEndBlock[bookFB._blockIndex] =
        bookFB._addedBlocks.retVal;
    return bookFB;
  }
}
// endregion BookField

// region BookFilterBuilder
class BookFilterBuilder extends SearchCriteria {
  BookFilterBuilder(Book obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Book _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  BookFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  BookFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  BookFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  BookFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  BookFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  BookFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  BookFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  BookFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  BookFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  BookFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  BookField setField(BookField field, String colName, DbType dbtype) {
    return BookField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  BookField _id;
  BookField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  BookField _testament_id;
  BookField get testament_id {
    return _testament_id =
        setField(_testament_id, 'testament_id', DbType.integer);
  }

  BookField _name;
  BookField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  BookField _abbreviation;
  BookField get abbreviation {
    return _abbreviation = setField(_abbreviation, 'abbreviation', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) {
              param.value = param.value == true ? 1 : 0;
            }
            break;
          default:
        }

        if (param.value != null) {
          whereArguments.add(param.value);
        }
        if (param.value2 != null) {
          whereArguments.add(param.value2);
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Book._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<Book> batch by query

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (Book._softDeleteActivated && !hardDelete) {
      r = await _obj._mnBook.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnBook.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnBook.updateBatch(qparams, values);
  }

  /// This method always returns BookObj if exist, otherwise returns null
  /// <returns>List<Book>
  Future<Book> toSingle([VoidCallback book(Book o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnBook.toList(qparams);
    final data = await objFuture;
    Book retVal;
    if (data.isNotEmpty) {
      retVal = Book.fromMap(data[0] as Map<String, dynamic>);
    } else {
      retVal = null;
    }
    if (book != null) {
      book(retVal);
    }
    return retVal;
  }

  /// This method always returns int.
  /// <returns>int
  Future<int> toCount([VoidCallback bookCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final booksFuture = await _obj._mnBook.toList(qparams);
    final int count = booksFuture[0]['CNT'] as int;
    if (bookCount != null) {
      bookCount(count);
    }
    return count;
  }

  /// This method always returns List<Book>.
  /// <returns>List<Book>
  Future<List<Book>> toList([VoidCallback bookList(List<Book> o)]) async {
    final List<Book> booksData = List<Book>();
    final data = await toMapList();
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      booksData.add(Book.fromMap(data[i] as Map<String, dynamic>));
    }
    if (bookList != null) bookList(booksData);
    return booksData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap());
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds());
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnBook.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Book>>
  Future<List<DropdownMenuItem<Book>>> toDropDownMenu(String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<Book>> o)]) async {
    _buildParameters();
    final booksFuture = _obj._mnBook.toList(qparams);

    final data = await booksFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Book>> items = List()
      ..add(DropdownMenuItem(
        value: Book(),
        child: Text('Select Book'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Book.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final booksFuture = _obj._mnBook.toList(qparams);

    final data = await booksFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Book'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnBook.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnBook.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Book.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnBook.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion BookFilterBuilder

// region BookFields
class BookFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fTestament_id;
  static TableField get testament_id {
    return _fTestament_id = _fTestament_id ??
        SqlSyntax.setField(_fTestament_id, 'testament_id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fAbbreviation;
  static TableField get abbreviation {
    return _fAbbreviation = _fAbbreviation ??
        SqlSyntax.setField(_fAbbreviation, 'abbreviation', DbType.text);
  }
}
// endregion BookFields

//region BookManager
class BookManager extends SqfEntityProvider {
  BookManager() : super(Mynewdbdb(), tableName: _tableName, colId: _colId);
  static String _tableName = 'book';
  static String _colId = 'id';
}

//endregion BookManager
// region Metadata
class Metadata {
  Metadata({this.key, this.value}) {
    setDefaultValues();
  }
  Metadata.withFields(this.value) {
    setDefaultValues();
  }
  Metadata.withId(this.key, this.value) {
    setDefaultValues();
  }
  Metadata.fromMap(Map<String, dynamic> o) {
    key = o['key'] as int;
    value = o['value'] as String;
  }
  // FIELDS
  int key;
  String value;
  // end FIELDS

  static const bool _softDeleteActivated = false;
  MetadataManager __mnMetadata;

  MetadataManager get _mnMetadata {
    return __mnMetadata = __mnMetadata ?? MetadataManager();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    final map = Map<String, dynamic>();
    if (key != null) {
      map['key'] = key;
    }
    if (value != null) {
      map['value'] = value;
    }

    return map;
  }

  // methods
  Future<Map<String, dynamic>> toMapWithChilds([bool forQuery = false]) async {
    final map = Map<String, dynamic>();
    if (key != null) {
      map['key'] = key;
    }
    if (value != null) {
      map['value'] = value;
    }

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap());
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds());
  }

  List<dynamic> toArgs() {
    return [key, value];
  }

  static Future<List<Metadata>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Metadata.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Metadata>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<Metadata>();
    try {
      objList = list
          .map((metadata) => Metadata.fromMap(metadata as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Metadata.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Metadata>> fromObjectList(Future<List<dynamic>> o) async {
    final metadatasList = List<Metadata>();
    final data = await o;
    for (int i = 0; i < data.length; i++) {
      metadatasList.add(Metadata.fromMap(data[i] as Map<String, dynamic>));
    }
    return metadatasList;
  }

  static List<Metadata> fromMapList(List<Map<String, dynamic>> query) {
    final List<Metadata> metadatas = List<Metadata>();
    for (Map map in query) {
      metadatas.add(Metadata.fromMap(map as Map<String, dynamic>));
    }
    return metadatas;
  }

  /// returns Metadata by ID if exist, otherwise returns null
  /// <param name='key'>Primary Key Value</param>
  /// <returns>returns Metadata if exist, otherwise returns null
  Future<Metadata> getById(int key) async {
    Metadata metadataObj;
    final data = await _mnMetadata.getById(key);
    if (data.length != 0) {
      metadataObj = Metadata.fromMap(data[0] as Map<String, dynamic>);
    } else {
      metadataObj = null;
    }
    return metadataObj;
  }

  /// Saves the object. If the key field is null, saves as a new record and returns new key, if key is not null then updates record

  /// <returns>Returns key
  Future<int> save() async {
    if (key == null || key == 0) {
      key = await _mnMetadata.insert(this);
    } else {
      key = await _upsert();
    }
    return key;
  }

  /// saveAs Metadata. Returns a new Primary Key value of Metadata

  /// <returns>Returns a new Primary Key value of Metadata
  Future<int> saveAs() async {
    key = null;
    return save();
  }

  /// saveAll method saves the sent List<Metadata> as a batch in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Metadata> metadatas) async {
    final results = _mnMetadata.saveAll(
        'INSERT OR REPLACE INTO metadata (key,  value)  VALUES (?,?)',
        metadatas);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns key
  Future<int> _upsert() async {
    return key = await _mnMetadata.rawInsert(
        'INSERT OR REPLACE INTO metadata (key,  value)  VALUES (?,?)',
        [key, value]);
  }

  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Metadata> metadatas) async {
    final results = await _mnMetadata.rawInsertAll(
        'INSERT OR REPLACE INTO metadata (key,  value)  VALUES (?,?)',
        metadatas);
    return results;
  }

  /// Deletes Metadata

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Metadata invoked (key=$key)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnMetadata
          .delete(QueryParams(whereString: 'key=?', whereArguments: [key]));
    } else {
      return _mnMetadata.updateBatch(
          QueryParams(whereString: 'key=?', whereArguments: [key]),
          {'isDeleted': 1});
    }
  }

  //private MetadataFilterBuilder _Select;
  MetadataFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return MetadataFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  MetadataFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return MetadataFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void setDefaultValues() {}
  //end methods
}
// endregion metadata

// region MetadataField
class MetadataField extends SearchCriteria {
  MetadataField(this.metadataFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  MetadataFilterBuilder metadataFB;

  MetadataField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  MetadataFilterBuilder equals(var pValue) {
    param.expression = '=';
    metadataFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, metadataFB.parameters, param, SqlSyntax.EQuals,
            metadataFB._addedBlocks)
        : setCriteria(pValue, metadataFB.parameters, param, SqlSyntax.NotEQuals,
            metadataFB._addedBlocks);
    _waitingNot = '';
    metadataFB._addedBlocks.needEndBlock[metadataFB._blockIndex] =
        metadataFB._addedBlocks.retVal;
    return metadataFB;
  }

  MetadataFilterBuilder isNull() {
    metadataFB._addedBlocks = setCriteria(
        0,
        metadataFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        metadataFB._addedBlocks);
    _waitingNot = '';
    metadataFB._addedBlocks.needEndBlock[metadataFB._blockIndex] =
        metadataFB._addedBlocks.retVal;
    return metadataFB;
  }

  MetadataFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      metadataFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          metadataFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          metadataFB._addedBlocks);
      _waitingNot = '';
      metadataFB._addedBlocks.needEndBlock[metadataFB._blockIndex] =
          metadataFB._addedBlocks.retVal;
    }
    return metadataFB;
  }

  MetadataFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      metadataFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          metadataFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          metadataFB._addedBlocks);
      _waitingNot = '';
      metadataFB._addedBlocks.needEndBlock[metadataFB._blockIndex] =
          metadataFB._addedBlocks.retVal;
      metadataFB._addedBlocks.needEndBlock[metadataFB._blockIndex] =
          metadataFB._addedBlocks.retVal;
    }
    return metadataFB;
  }

  MetadataFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      metadataFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          metadataFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          metadataFB._addedBlocks);
      _waitingNot = '';
      metadataFB._addedBlocks.needEndBlock[metadataFB._blockIndex] =
          metadataFB._addedBlocks.retVal;
    }
    return metadataFB;
  }

  MetadataFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      metadataFB._addedBlocks = setCriteria(
          pFirst,
          metadataFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          metadataFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        metadataFB._addedBlocks = setCriteria(pFirst, metadataFB.parameters,
            param, SqlSyntax.LessThan, metadataFB._addedBlocks);
      } else {
        metadataFB._addedBlocks = setCriteria(pFirst, metadataFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, metadataFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        metadataFB._addedBlocks = setCriteria(pLast, metadataFB.parameters,
            param, SqlSyntax.GreaterThan, metadataFB._addedBlocks);
      } else {
        metadataFB._addedBlocks = setCriteria(pLast, metadataFB.parameters,
            param, SqlSyntax.LessThanOrEquals, metadataFB._addedBlocks);
      }
    }
    _waitingNot = '';
    metadataFB._addedBlocks.needEndBlock[metadataFB._blockIndex] =
        metadataFB._addedBlocks.retVal;
    return metadataFB;
  }

  MetadataFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    metadataFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, metadataFB.parameters, param,
            SqlSyntax.GreaterThan, metadataFB._addedBlocks)
        : setCriteria(pValue, metadataFB.parameters, param,
            SqlSyntax.LessThanOrEquals, metadataFB._addedBlocks);
    _waitingNot = '';
    metadataFB._addedBlocks.needEndBlock[metadataFB._blockIndex] =
        metadataFB._addedBlocks.retVal;
    return metadataFB;
  }

  MetadataFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    metadataFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, metadataFB.parameters, param, SqlSyntax.LessThan,
            metadataFB._addedBlocks)
        : setCriteria(pValue, metadataFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, metadataFB._addedBlocks);
    _waitingNot = '';
    metadataFB._addedBlocks.needEndBlock[metadataFB._blockIndex] =
        metadataFB._addedBlocks.retVal;
    return metadataFB;
  }

  MetadataFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    metadataFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, metadataFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, metadataFB._addedBlocks)
        : setCriteria(pValue, metadataFB.parameters, param, SqlSyntax.LessThan,
            metadataFB._addedBlocks);
    _waitingNot = '';
    metadataFB._addedBlocks.needEndBlock[metadataFB._blockIndex] =
        metadataFB._addedBlocks.retVal;
    return metadataFB;
  }

  MetadataFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    metadataFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, metadataFB.parameters, param,
            SqlSyntax.LessThanOrEquals, metadataFB._addedBlocks)
        : setCriteria(pValue, metadataFB.parameters, param,
            SqlSyntax.GreaterThan, metadataFB._addedBlocks);
    _waitingNot = '';
    metadataFB._addedBlocks.needEndBlock[metadataFB._blockIndex] =
        metadataFB._addedBlocks.retVal;
    return metadataFB;
  }

  MetadataFilterBuilder inValues(var pValue) {
    metadataFB._addedBlocks = setCriteria(
        pValue,
        metadataFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        metadataFB._addedBlocks);
    _waitingNot = '';
    metadataFB._addedBlocks.needEndBlock[metadataFB._blockIndex] =
        metadataFB._addedBlocks.retVal;
    return metadataFB;
  }
}
// endregion MetadataField

// region MetadataFilterBuilder
class MetadataFilterBuilder extends SearchCriteria {
  MetadataFilterBuilder(Metadata obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Metadata _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  MetadataFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  MetadataFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  MetadataFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  MetadataFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  MetadataFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  MetadataFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  MetadataFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  MetadataFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  MetadataFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  MetadataFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  MetadataField setField(MetadataField field, String colName, DbType dbtype) {
    return MetadataField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  MetadataField _key;
  MetadataField get key {
    return _key = setField(_key, 'key', DbType.integer);
  }

  MetadataField _value;
  MetadataField get value {
    return _value = setField(_value, 'value', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) {
              param.value = param.value == true ? 1 : 0;
            }
            break;
          default:
        }

        if (param.value != null) {
          whereArguments.add(param.value);
        }
        if (param.value2 != null) {
          whereArguments.add(param.value2);
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Metadata._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<Metadata> batch by query

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (Metadata._softDeleteActivated && !hardDelete) {
      r = await _obj._mnMetadata.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnMetadata.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnMetadata.updateBatch(qparams, values);
  }

  /// This method always returns MetadataObj if exist, otherwise returns null
  /// <returns>List<Metadata>
  Future<Metadata> toSingle([VoidCallback metadata(Metadata o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnMetadata.toList(qparams);
    final data = await objFuture;
    Metadata retVal;
    if (data.isNotEmpty) {
      retVal = Metadata.fromMap(data[0] as Map<String, dynamic>);
    } else {
      retVal = null;
    }
    if (metadata != null) {
      metadata(retVal);
    }
    return retVal;
  }

  /// This method always returns int.
  /// <returns>int
  Future<int> toCount([VoidCallback metadataCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final metadatasFuture = await _obj._mnMetadata.toList(qparams);
    final int count = metadatasFuture[0]['CNT'] as int;
    if (metadataCount != null) {
      metadataCount(count);
    }
    return count;
  }

  /// This method always returns List<Metadata>.
  /// <returns>List<Metadata>
  Future<List<Metadata>> toList(
      [VoidCallback metadataList(List<Metadata> o)]) async {
    final List<Metadata> metadatasData = List<Metadata>();
    final data = await toMapList();
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      metadatasData.add(Metadata.fromMap(data[i] as Map<String, dynamic>));
    }
    if (metadataList != null) metadataList(metadatasData);
    return metadatasData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap());
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds());
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnMetadata.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Metadata>>
  Future<List<DropdownMenuItem<Metadata>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<Metadata>> o)]) async {
    _buildParameters();
    final metadatasFuture = _obj._mnMetadata.toList(qparams);

    final data = await metadatasFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Metadata>> items = List()
      ..add(DropdownMenuItem(
        value: Metadata(),
        child: Text('Select Metadata'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Metadata.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['key', displayTextColumn];
    final metadatasFuture = _obj._mnMetadata.toList(qparams);

    final data = await metadatasFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Metadata'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['key'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> keyData = List<int>();
    qparams.selectColumns = ['key'];
    final keyFuture = await _obj._mnMetadata.toList(qparams);

    final int count = keyFuture.length;
    for (int i = 0; i < count; i++) {
      keyData.add(keyFuture[i]['key'] as int);
    }
    return keyData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnMetadata.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Metadata.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnMetadata.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion MetadataFilterBuilder

// region MetadataFields
class MetadataFields {
  static TableField _fKey;
  static TableField get key {
    return _fKey = _fKey ?? SqlSyntax.setField(_fKey, 'key', DbType.integer);
  }

  static TableField _fValue;
  static TableField get value {
    return _fValue =
        _fValue ?? SqlSyntax.setField(_fValue, 'value', DbType.text);
  }
}
// endregion MetadataFields

//region MetadataManager
class MetadataManager extends SqfEntityProvider {
  MetadataManager() : super(Mynewdbdb(), tableName: _tableName, colId: _colId);
  static String _tableName = 'metadata';
  static String _colId = 'key';
}

//endregion MetadataManager
// region Testament
class Testament {
  Testament({this.id, this.name}) {
    setDefaultValues();
  }
  Testament.withFields(this.name) {
    setDefaultValues();
  }
  Testament.withId(this.id, this.name) {
    setDefaultValues();
  }
  Testament.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    name = o['name'] as String;
  }
  // FIELDS
  int id;
  String name;
  // end FIELDS

  static const bool _softDeleteActivated = false;
  TestamentManager __mnTestament;

  TestamentManager get _mnTestament {
    return __mnTestament = __mnTestament ?? TestamentManager();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    return map;
  }

  // methods
  Future<Map<String, dynamic>> toMapWithChilds([bool forQuery = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap());
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds());
  }

  List<dynamic> toArgs() {
    return [id, name];
  }

  static Future<List<Testament>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Testament.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Testament>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<Testament>();
    try {
      objList = list
          .map((testament) =>
              Testament.fromMap(testament as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Testament.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Testament>> fromObjectList(Future<List<dynamic>> o) async {
    final testamentsList = List<Testament>();
    final data = await o;
    for (int i = 0; i < data.length; i++) {
      testamentsList.add(Testament.fromMap(data[i] as Map<String, dynamic>));
    }
    return testamentsList;
  }

  static List<Testament> fromMapList(List<Map<String, dynamic>> query) {
    final List<Testament> testaments = List<Testament>();
    for (Map map in query) {
      testaments.add(Testament.fromMap(map as Map<String, dynamic>));
    }
    return testaments;
  }

  /// returns Testament by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns Testament if exist, otherwise returns null
  Future<Testament> getById(int id) async {
    Testament testamentObj;
    final data = await _mnTestament.getById(id);
    if (data.length != 0) {
      testamentObj = Testament.fromMap(data[0] as Map<String, dynamic>);
    } else {
      testamentObj = null;
    }
    return testamentObj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnTestament.insert(this);
    } else {
      id = await _upsert();
    }
    return id;
  }

  /// saveAs Testament. Returns a new Primary Key value of Testament

  /// <returns>Returns a new Primary Key value of Testament
  Future<int> saveAs() async {
    id = null;
    return save();
  }

  /// saveAll method saves the sent List<Testament> as a batch in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Testament> testaments) async {
    final results = _mnTestament.saveAll(
        'INSERT OR REPLACE INTO testament (id,  name)  VALUES (?,?)',
        testaments);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    return id = await _mnTestament.rawInsert(
        'INSERT OR REPLACE INTO testament (id,  name)  VALUES (?,?)',
        [id, name]);
  }

  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Testament> testaments) async {
    final results = await _mnTestament.rawInsertAll(
        'INSERT OR REPLACE INTO testament (id,  name)  VALUES (?,?)',
        testaments);
    return results;
  }

  /// Deletes Testament

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Testament invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnTestament
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTestament.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  //private TestamentFilterBuilder _Select;
  TestamentFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return TestamentFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  TestamentFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return TestamentFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void setDefaultValues() {}
  //end methods
}
// endregion testament

// region TestamentField
class TestamentField extends SearchCriteria {
  TestamentField(this.testamentFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  TestamentFilterBuilder testamentFB;

  TestamentField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  TestamentFilterBuilder equals(var pValue) {
    param.expression = '=';
    testamentFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, testamentFB.parameters, param, SqlSyntax.EQuals,
            testamentFB._addedBlocks)
        : setCriteria(pValue, testamentFB.parameters, param,
            SqlSyntax.NotEQuals, testamentFB._addedBlocks);
    _waitingNot = '';
    testamentFB._addedBlocks.needEndBlock[testamentFB._blockIndex] =
        testamentFB._addedBlocks.retVal;
    return testamentFB;
  }

  TestamentFilterBuilder isNull() {
    testamentFB._addedBlocks = setCriteria(
        0,
        testamentFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        testamentFB._addedBlocks);
    _waitingNot = '';
    testamentFB._addedBlocks.needEndBlock[testamentFB._blockIndex] =
        testamentFB._addedBlocks.retVal;
    return testamentFB;
  }

  TestamentFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      testamentFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          testamentFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          testamentFB._addedBlocks);
      _waitingNot = '';
      testamentFB._addedBlocks.needEndBlock[testamentFB._blockIndex] =
          testamentFB._addedBlocks.retVal;
    }
    return testamentFB;
  }

  TestamentFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      testamentFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          testamentFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          testamentFB._addedBlocks);
      _waitingNot = '';
      testamentFB._addedBlocks.needEndBlock[testamentFB._blockIndex] =
          testamentFB._addedBlocks.retVal;
      testamentFB._addedBlocks.needEndBlock[testamentFB._blockIndex] =
          testamentFB._addedBlocks.retVal;
    }
    return testamentFB;
  }

  TestamentFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      testamentFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          testamentFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          testamentFB._addedBlocks);
      _waitingNot = '';
      testamentFB._addedBlocks.needEndBlock[testamentFB._blockIndex] =
          testamentFB._addedBlocks.retVal;
    }
    return testamentFB;
  }

  TestamentFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      testamentFB._addedBlocks = setCriteria(
          pFirst,
          testamentFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          testamentFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        testamentFB._addedBlocks = setCriteria(pFirst, testamentFB.parameters,
            param, SqlSyntax.LessThan, testamentFB._addedBlocks);
      } else {
        testamentFB._addedBlocks = setCriteria(pFirst, testamentFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, testamentFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        testamentFB._addedBlocks = setCriteria(pLast, testamentFB.parameters,
            param, SqlSyntax.GreaterThan, testamentFB._addedBlocks);
      } else {
        testamentFB._addedBlocks = setCriteria(pLast, testamentFB.parameters,
            param, SqlSyntax.LessThanOrEquals, testamentFB._addedBlocks);
      }
    }
    _waitingNot = '';
    testamentFB._addedBlocks.needEndBlock[testamentFB._blockIndex] =
        testamentFB._addedBlocks.retVal;
    return testamentFB;
  }

  TestamentFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    testamentFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, testamentFB.parameters, param,
            SqlSyntax.GreaterThan, testamentFB._addedBlocks)
        : setCriteria(pValue, testamentFB.parameters, param,
            SqlSyntax.LessThanOrEquals, testamentFB._addedBlocks);
    _waitingNot = '';
    testamentFB._addedBlocks.needEndBlock[testamentFB._blockIndex] =
        testamentFB._addedBlocks.retVal;
    return testamentFB;
  }

  TestamentFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    testamentFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, testamentFB.parameters, param, SqlSyntax.LessThan,
            testamentFB._addedBlocks)
        : setCriteria(pValue, testamentFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, testamentFB._addedBlocks);
    _waitingNot = '';
    testamentFB._addedBlocks.needEndBlock[testamentFB._blockIndex] =
        testamentFB._addedBlocks.retVal;
    return testamentFB;
  }

  TestamentFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    testamentFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, testamentFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, testamentFB._addedBlocks)
        : setCriteria(pValue, testamentFB.parameters, param, SqlSyntax.LessThan,
            testamentFB._addedBlocks);
    _waitingNot = '';
    testamentFB._addedBlocks.needEndBlock[testamentFB._blockIndex] =
        testamentFB._addedBlocks.retVal;
    return testamentFB;
  }

  TestamentFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    testamentFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, testamentFB.parameters, param,
            SqlSyntax.LessThanOrEquals, testamentFB._addedBlocks)
        : setCriteria(pValue, testamentFB.parameters, param,
            SqlSyntax.GreaterThan, testamentFB._addedBlocks);
    _waitingNot = '';
    testamentFB._addedBlocks.needEndBlock[testamentFB._blockIndex] =
        testamentFB._addedBlocks.retVal;
    return testamentFB;
  }

  TestamentFilterBuilder inValues(var pValue) {
    testamentFB._addedBlocks = setCriteria(
        pValue,
        testamentFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        testamentFB._addedBlocks);
    _waitingNot = '';
    testamentFB._addedBlocks.needEndBlock[testamentFB._blockIndex] =
        testamentFB._addedBlocks.retVal;
    return testamentFB;
  }
}
// endregion TestamentField

// region TestamentFilterBuilder
class TestamentFilterBuilder extends SearchCriteria {
  TestamentFilterBuilder(Testament obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Testament _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  TestamentFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  TestamentFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  TestamentFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  TestamentFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  TestamentFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  TestamentFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  TestamentFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  TestamentFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  TestamentFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  TestamentFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  TestamentField setField(TestamentField field, String colName, DbType dbtype) {
    return TestamentField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  TestamentField _id;
  TestamentField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  TestamentField _name;
  TestamentField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) {
              param.value = param.value == true ? 1 : 0;
            }
            break;
          default:
        }

        if (param.value != null) {
          whereArguments.add(param.value);
        }
        if (param.value2 != null) {
          whereArguments.add(param.value2);
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Testament._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<Testament> batch by query

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (Testament._softDeleteActivated && !hardDelete) {
      r = await _obj._mnTestament.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnTestament.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnTestament.updateBatch(qparams, values);
  }

  /// This method always returns TestamentObj if exist, otherwise returns null
  /// <returns>List<Testament>
  Future<Testament> toSingle([VoidCallback testament(Testament o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnTestament.toList(qparams);
    final data = await objFuture;
    Testament retVal;
    if (data.isNotEmpty) {
      retVal = Testament.fromMap(data[0] as Map<String, dynamic>);
    } else {
      retVal = null;
    }
    if (testament != null) {
      testament(retVal);
    }
    return retVal;
  }

  /// This method always returns int.
  /// <returns>int
  Future<int> toCount([VoidCallback testamentCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final testamentsFuture = await _obj._mnTestament.toList(qparams);
    final int count = testamentsFuture[0]['CNT'] as int;
    if (testamentCount != null) {
      testamentCount(count);
    }
    return count;
  }

  /// This method always returns List<Testament>.
  /// <returns>List<Testament>
  Future<List<Testament>> toList(
      [VoidCallback testamentList(List<Testament> o)]) async {
    final List<Testament> testamentsData = List<Testament>();
    final data = await toMapList();
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      testamentsData.add(Testament.fromMap(data[i] as Map<String, dynamic>));
    }
    if (testamentList != null) testamentList(testamentsData);
    return testamentsData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap());
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds());
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnTestament.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Testament>>
  Future<List<DropdownMenuItem<Testament>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<Testament>> o)]) async {
    _buildParameters();
    final testamentsFuture = _obj._mnTestament.toList(qparams);

    final data = await testamentsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Testament>> items = List()
      ..add(DropdownMenuItem(
        value: Testament(),
        child: Text('Select Testament'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Testament.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final testamentsFuture = _obj._mnTestament.toList(qparams);

    final data = await testamentsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Testament'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnTestament.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnTestament.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Testament.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnTestament.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TestamentFilterBuilder

// region TestamentFields
class TestamentFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }
}
// endregion TestamentFields

//region TestamentManager
class TestamentManager extends SqfEntityProvider {
  TestamentManager() : super(Mynewdbdb(), tableName: _tableName, colId: _colId);
  static String _tableName = 'testament';
  static String _colId = 'id';
}

//endregion TestamentManager
// region Verse
class Verse {
  Verse({this.id, this.book_id, this.chapter, this.verse, this.text}) {
    setDefaultValues();
  }
  Verse.withFields(this.book_id, this.chapter, this.verse, this.text) {
    setDefaultValues();
  }
  Verse.withId(this.id, this.book_id, this.chapter, this.verse, this.text) {
    setDefaultValues();
  }
  Verse.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    book_id = o['book_id'] as int;

    chapter = o['chapter'] as int;

    verse = o['verse'] as int;

    text = o['text'] as String;
  }
  // FIELDS
  int id;
  int book_id;
  int chapter;
  int verse;
  String text;
  // end FIELDS

  static const bool _softDeleteActivated = false;
  VerseManager __mnVerse;

  VerseManager get _mnVerse {
    return __mnVerse = __mnVerse ?? VerseManager();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (book_id != null) {
      map['book_id'] = book_id;
    }

    if (chapter != null) {
      map['chapter'] = chapter;
    }

    if (verse != null) {
      map['verse'] = verse;
    }

    if (text != null) {
      map['text'] = text;
    }

    return map;
  }

  // methods
  Future<Map<String, dynamic>> toMapWithChilds([bool forQuery = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (book_id != null) {
      map['book_id'] = book_id;
    }

    if (chapter != null) {
      map['chapter'] = chapter;
    }

    if (verse != null) {
      map['verse'] = verse;
    }

    if (text != null) {
      map['text'] = text;
    }

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap());
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds());
  }

  List<dynamic> toArgs() {
    return [id, book_id, chapter, verse, text];
  }

  static Future<List<Verse>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Verse.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Verse>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<Verse>();
    try {
      objList = list
          .map((verse) => Verse.fromMap(verse as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Verse.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Verse>> fromObjectList(Future<List<dynamic>> o) async {
    final versesList = List<Verse>();
    final data = await o;
    for (int i = 0; i < data.length; i++) {
      versesList.add(Verse.fromMap(data[i] as Map<String, dynamic>));
    }
    return versesList;
  }

  static List<Verse> fromMapList(List<Map<String, dynamic>> query) {
    final List<Verse> verses = List<Verse>();
    for (Map map in query) {
      verses.add(Verse.fromMap(map as Map<String, dynamic>));
    }
    return verses;
  }

  /// returns Verse by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns Verse if exist, otherwise returns null
  Future<Verse> getById(int id) async {
    Verse verseObj;
    final data = await _mnVerse.getById(id);
    if (data.length != 0) {
      verseObj = Verse.fromMap(data[0] as Map<String, dynamic>);
    } else {
      verseObj = null;
    }
    return verseObj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnVerse.insert(this);
    } else {
      id = await _upsert();
    }
    return id;
  }

  /// saveAs Verse. Returns a new Primary Key value of Verse

  /// <returns>Returns a new Primary Key value of Verse
  Future<int> saveAs() async {
    id = null;
    return save();
  }

  /// saveAll method saves the sent List<Verse> as a batch in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Verse> verses) async {
    final results = _mnVerse.saveAll(
        'INSERT OR REPLACE INTO verse (id,  book_id, chapter, verse, text)  VALUES (?,?,?,?,?)',
        verses);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    return id = await _mnVerse.rawInsert(
        'INSERT OR REPLACE INTO verse (id,  book_id, chapter, verse, text)  VALUES (?,?,?,?,?)',
        [id, book_id, chapter, verse, text]);
  }

  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Verse> verses) async {
    final results = await _mnVerse.rawInsertAll(
        'INSERT OR REPLACE INTO verse (id,  book_id, chapter, verse, text)  VALUES (?,?,?,?,?)',
        verses);
    return results;
  }

  /// Deletes Verse

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Verse invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnVerse
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnVerse.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  //private VerseFilterBuilder _Select;
  VerseFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    return VerseFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  VerseFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return VerseFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void setDefaultValues() {}
  //end methods
}
// endregion verse

// region VerseField
class VerseField extends SearchCriteria {
  VerseField(this.verseFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  VerseFilterBuilder verseFB;

  VerseField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  VerseFilterBuilder equals(var pValue) {
    param.expression = '=';
    verseFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, verseFB.parameters, param, SqlSyntax.EQuals,
            verseFB._addedBlocks)
        : setCriteria(pValue, verseFB.parameters, param, SqlSyntax.NotEQuals,
            verseFB._addedBlocks);
    _waitingNot = '';
    verseFB._addedBlocks.needEndBlock[verseFB._blockIndex] =
        verseFB._addedBlocks.retVal;
    return verseFB;
  }

  VerseFilterBuilder isNull() {
    verseFB._addedBlocks = setCriteria(
        0,
        verseFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        verseFB._addedBlocks);
    _waitingNot = '';
    verseFB._addedBlocks.needEndBlock[verseFB._blockIndex] =
        verseFB._addedBlocks.retVal;
    return verseFB;
  }

  VerseFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      verseFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          verseFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          verseFB._addedBlocks);
      _waitingNot = '';
      verseFB._addedBlocks.needEndBlock[verseFB._blockIndex] =
          verseFB._addedBlocks.retVal;
    }
    return verseFB;
  }

  VerseFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      verseFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          verseFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          verseFB._addedBlocks);
      _waitingNot = '';
      verseFB._addedBlocks.needEndBlock[verseFB._blockIndex] =
          verseFB._addedBlocks.retVal;
      verseFB._addedBlocks.needEndBlock[verseFB._blockIndex] =
          verseFB._addedBlocks.retVal;
    }
    return verseFB;
  }

  VerseFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      verseFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          verseFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          verseFB._addedBlocks);
      _waitingNot = '';
      verseFB._addedBlocks.needEndBlock[verseFB._blockIndex] =
          verseFB._addedBlocks.retVal;
    }
    return verseFB;
  }

  VerseFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      verseFB._addedBlocks = setCriteria(
          pFirst,
          verseFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          verseFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        verseFB._addedBlocks = setCriteria(pFirst, verseFB.parameters, param,
            SqlSyntax.LessThan, verseFB._addedBlocks);
      } else {
        verseFB._addedBlocks = setCriteria(pFirst, verseFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, verseFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        verseFB._addedBlocks = setCriteria(pLast, verseFB.parameters, param,
            SqlSyntax.GreaterThan, verseFB._addedBlocks);
      } else {
        verseFB._addedBlocks = setCriteria(pLast, verseFB.parameters, param,
            SqlSyntax.LessThanOrEquals, verseFB._addedBlocks);
      }
    }
    _waitingNot = '';
    verseFB._addedBlocks.needEndBlock[verseFB._blockIndex] =
        verseFB._addedBlocks.retVal;
    return verseFB;
  }

  VerseFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    verseFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, verseFB.parameters, param, SqlSyntax.GreaterThan,
            verseFB._addedBlocks)
        : setCriteria(pValue, verseFB.parameters, param,
            SqlSyntax.LessThanOrEquals, verseFB._addedBlocks);
    _waitingNot = '';
    verseFB._addedBlocks.needEndBlock[verseFB._blockIndex] =
        verseFB._addedBlocks.retVal;
    return verseFB;
  }

  VerseFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    verseFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, verseFB.parameters, param, SqlSyntax.LessThan,
            verseFB._addedBlocks)
        : setCriteria(pValue, verseFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, verseFB._addedBlocks);
    _waitingNot = '';
    verseFB._addedBlocks.needEndBlock[verseFB._blockIndex] =
        verseFB._addedBlocks.retVal;
    return verseFB;
  }

  VerseFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    verseFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, verseFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, verseFB._addedBlocks)
        : setCriteria(pValue, verseFB.parameters, param, SqlSyntax.LessThan,
            verseFB._addedBlocks);
    _waitingNot = '';
    verseFB._addedBlocks.needEndBlock[verseFB._blockIndex] =
        verseFB._addedBlocks.retVal;
    return verseFB;
  }

  VerseFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    verseFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, verseFB.parameters, param,
            SqlSyntax.LessThanOrEquals, verseFB._addedBlocks)
        : setCriteria(pValue, verseFB.parameters, param, SqlSyntax.GreaterThan,
            verseFB._addedBlocks);
    _waitingNot = '';
    verseFB._addedBlocks.needEndBlock[verseFB._blockIndex] =
        verseFB._addedBlocks.retVal;
    return verseFB;
  }

  VerseFilterBuilder inValues(var pValue) {
    verseFB._addedBlocks = setCriteria(
        pValue,
        verseFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        verseFB._addedBlocks);
    _waitingNot = '';
    verseFB._addedBlocks.needEndBlock[verseFB._blockIndex] =
        verseFB._addedBlocks.retVal;
    return verseFB;
  }
}
// endregion VerseField

// region VerseFilterBuilder
class VerseFilterBuilder extends SearchCriteria {
  VerseFilterBuilder(Verse obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Verse _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  VerseFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  VerseFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  VerseFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  VerseFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  VerseFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  VerseFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  VerseFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  VerseFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  VerseFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  VerseFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  VerseField setField(VerseField field, String colName, DbType dbtype) {
    return VerseField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  VerseField _id;
  VerseField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  VerseField _book_id;
  VerseField get book_id {
    return _book_id = setField(_book_id, 'book_id', DbType.integer);
  }

  VerseField _chapter;
  VerseField get chapter {
    return _chapter = setField(_chapter, 'chapter', DbType.integer);
  }

  VerseField _verse;
  VerseField get verse {
    return _verse = setField(_verse, 'verse', DbType.integer);
  }

  VerseField _text;
  VerseField get text {
    return _text = setField(_text, 'text', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) {
              param.value = param.value == true ? 1 : 0;
            }
            break;
          default:
        }

        if (param.value != null) {
          whereArguments.add(param.value);
        }
        if (param.value2 != null) {
          whereArguments.add(param.value2);
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Verse._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<Verse> batch by query

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (Verse._softDeleteActivated && !hardDelete) {
      r = await _obj._mnVerse.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnVerse.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnVerse.updateBatch(qparams, values);
  }

  /// This method always returns VerseObj if exist, otherwise returns null
  /// <returns>List<Verse>
  Future<Verse> toSingle([VoidCallback verse(Verse o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnVerse.toList(qparams);
    final data = await objFuture;
    Verse retVal;
    if (data.isNotEmpty) {
      retVal = Verse.fromMap(data[0] as Map<String, dynamic>);
    } else {
      retVal = null;
    }
    if (verse != null) {
      verse(retVal);
    }
    return retVal;
  }

  /// This method always returns int.
  /// <returns>int
  Future<int> toCount([VoidCallback verseCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final versesFuture = await _obj._mnVerse.toList(qparams);
    final int count = versesFuture[0]['CNT'] as int;
    if (verseCount != null) {
      verseCount(count);
    }
    return count;
  }

  /// This method always returns List<Verse>.
  /// <returns>List<Verse>
  Future<List<Verse>> toList([VoidCallback verseList(List<Verse> o)]) async {
    final List<Verse> versesData = List<Verse>();
    final data = await toMapList();
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      versesData.add(Verse.fromMap(data[i] as Map<String, dynamic>));
    }
    if (verseList != null) verseList(versesData);
    return versesData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap());
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds());
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnVerse.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Verse>>
  Future<List<DropdownMenuItem<Verse>>> toDropDownMenu(String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<Verse>> o)]) async {
    _buildParameters();
    final versesFuture = _obj._mnVerse.toList(qparams);

    final data = await versesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Verse>> items = List()
      ..add(DropdownMenuItem(
        value: Verse(),
        child: Text('Select Verse'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Verse.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final versesFuture = _obj._mnVerse.toList(qparams);

    final data = await versesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Verse'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnVerse.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnVerse.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Verse.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnVerse.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion VerseFilterBuilder

// region VerseFields
class VerseFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fBook_id;
  static TableField get book_id {
    return _fBook_id =
        _fBook_id ?? SqlSyntax.setField(_fBook_id, 'book_id', DbType.integer);
  }

  static TableField _fChapter;
  static TableField get chapter {
    return _fChapter =
        _fChapter ?? SqlSyntax.setField(_fChapter, 'chapter', DbType.integer);
  }

  static TableField _fVerse;
  static TableField get verse {
    return _fVerse =
        _fVerse ?? SqlSyntax.setField(_fVerse, 'verse', DbType.integer);
  }

  static TableField _fText;
  static TableField get text {
    return _fText = _fText ?? SqlSyntax.setField(_fText, 'text', DbType.text);
  }
}
// endregion VerseFields

//region VerseManager
class VerseManager extends SqfEntityProvider {
  VerseManager() : super(Mynewdbdb(), tableName: _tableName, colId: _colId);
  static String _tableName = 'verse';
  static String _colId = 'id';
}

//endregion VerseManager
class MynewdbdbSequenceManager extends SqfEntityProvider {
  MynewdbdbSequenceManager() : super(Mynewdbdb());
}
// END OF ENTITIES
